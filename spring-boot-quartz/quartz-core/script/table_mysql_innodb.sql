#
# In your Quartz properties file, you'll need to set
# org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#
#
# By: Ron Cordell - roncordell
#  I didn't see this anywhere, so I thought I'd post it here. This is the script from Quartz to create the tables in a MySQL database, modified to use INNODB instead of MYISAM.

DROP TABLE IF EXISTS QRTZ_FIRED_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_PAUSED_TRIGGER_GRPS;
DROP TABLE IF EXISTS QRTZ_SCHEDULER_STATE;
DROP TABLE IF EXISTS QRTZ_LOCKS;
DROP TABLE IF EXISTS QRTZ_SIMPLE_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_SIMPROP_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_CRON_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_BLOB_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_TRIGGERS;
DROP TABLE IF EXISTS QRTZ_JOB_DETAILS;
DROP TABLE IF EXISTS QRTZ_CALENDARS;

CREATE TABLE QRTZ_JOB_DETAILS
(
    SCHED_NAME        VARCHAR(120) NOT NULL COMMENT '调度器名,集群环境中使用,必须使用同一个名称——集群环境下”逻辑”相同的scheduler,默认为QuartzScheduler',
    JOB_NAME          VARCHAR(190) NOT NULL COMMENT '集群中job的名字',
    JOB_GROUP         VARCHAR(190) NOT NULL COMMENT '集群中job的所属组的名字',
    DESCRIPTION       VARCHAR(250) NULL COMMENT '描述',
    JOB_CLASS_NAME    VARCHAR(250) NOT NULL COMMENT '集群中个note job实现类的完全包名,quartz就是根据这个路径到classpath找到该job类',
    IS_DURABLE        VARCHAR(1)   NOT NULL COMMENT '是否持久化,把该属性设置为1,quartz会把job持久化到数据库中',
    IS_NONCONCURRENT  VARCHAR(1)   NOT NULL COMMENT '是否并行，该属性可以通过注解配置',
    IS_UPDATE_DATA    VARCHAR(1)   NOT NULL COMMENT '',
    REQUESTS_RECOVERY VARCHAR(1)   NOT NULL COMMENT '当一个scheduler失败后，其他实例可以发现那些执行失败的Jobs，若是1，那么该Job会被其他实例重新执行，否则对应的Job只能释放等待下次触发',
    JOB_DATA          BLOB         NULL COMMENT '一个blob字段，存放持久化job对象',
    PRIMARY KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
) ENGINE = InnoDB COMMENT = '存储每一个已配置的 Job 的详细信息';

CREATE TABLE QRTZ_TRIGGERS
(
    SCHED_NAME     VARCHAR(120) NOT NULL COMMENT '调度器名，和配置文件org.quartz.scheduler.instanceName保持一致',
    TRIGGER_NAME   VARCHAR(190) NOT NULL COMMENT '触发器的名字',
    TRIGGER_GROUP  VARCHAR(190) NOT NULL COMMENT '触发器所属组的名字',
    JOB_NAME       VARCHAR(190) NOT NULL COMMENT 'qrtz_job_details表job_name的外键',
    JOB_GROUP      VARCHAR(190) NOT NULL COMMENT 'qrtz_job_details表job_group的外键',
    DESCRIPTION    VARCHAR(250) NULL COMMENT '描述',
    NEXT_FIRE_TIME BIGINT(13)   NULL COMMENT '下一次触发时间',
    PREV_FIRE_TIME BIGINT(13)   NULL COMMENT '上一次触发时间',
    PRIORITY       INTEGER      NULL COMMENT '线程优先级',
    TRIGGER_STATE  VARCHAR(16)  NOT NULL COMMENT '当前trigger状态，设置为ACQUIRED,如果设置为WAITING,则job不会触发',
    TRIGGER_TYPE   VARCHAR(8)   NOT NULL COMMENT '触发器类型',
    START_TIME     BIGINT(13)   NOT NULL COMMENT '开始时间',
    END_TIME       BIGINT(13)   NULL COMMENT '结束时间',
    CALENDAR_NAME  VARCHAR(190) NULL COMMENT '日历名称',
    MISFIRE_INSTR  SMALLINT(2)  NULL COMMENT 'misfire处理规则:
        * 1代表【以当前时间为触发频率立刻触发一次，然后按照Cron频率依次执行】,
        * 2代表【不触发立即执行,等待下次Cron触发频率到达时刻开始按照Cron频率依次执行】,
        * -1代表【以错过的第一个频率时间立刻开始执行,重做错过的所有频率周期后，当下一次触发频率发生时间大于当前时间后，再按照正常的Cron频率依次执行】',
    JOB_DATA       BLOB         NULL COMMENT 'JOB存储对象',
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, JOB_NAME, JOB_GROUP)
        REFERENCES QRTZ_JOB_DETAILS (SCHED_NAME, JOB_NAME, JOB_GROUP)
) ENGINE = InnoDB COMMENT = '存储已配置的 Trigger 的信息';

# 存储简单的trigger，包括重复次数，间隔，以及触发次数。
# 注意：TIMES_TRIGGERED用来记录执行了多少次了，此值被定义在SimpleTriggerImpl中，每次执行+1，
# 这里定义的REPEAT_COUNT=5，实际情况会执行6次。因为第一次是在0开始。
CREATE TABLE QRTZ_SIMPLE_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL COMMENT '调度器名，和配置文件org.quartz.scheduler.instanceName保持一致',
    TRIGGER_NAME    VARCHAR(190) NOT NULL COMMENT '触发器名,qrtz_triggers表trigger_name的外键',
    TRIGGER_GROUP   VARCHAR(190) NOT NULL COMMENT 'qrtz_triggers表trigger_group的外键',
    REPEAT_COUNT    BIGINT(7)    NOT NULL COMMENT '重复次数',
    REPEAT_INTERVAL BIGINT(12)   NOT NULL COMMENT '重复间隔',
    TIMES_TRIGGERED BIGINT(10)   NOT NULL COMMENT '已触发次数',
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB COMMENT = '存储简单的 Trigger，包括重复次数，间隔，以及已触的次数';

CREATE TABLE QRTZ_CRON_TRIGGERS
(
    SCHED_NAME      VARCHAR(120) NOT NULL COMMENT '调度器名，和配置文件org.quartz.scheduler.instanceName保持一致',
    TRIGGER_NAME    VARCHAR(190) NOT NULL COMMENT '触发器名,qrtz_triggers表trigger_name的外键',
    TRIGGER_GROUP   VARCHAR(190) NOT NULL COMMENT 'qrtz_triggers表trigger_group的外键',
    CRON_EXPRESSION VARCHAR(120) NOT NULL COMMENT 'cron表达式',
    TIME_ZONE_ID    VARCHAR(80) COMMENT '时区ID',
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB COMMENT = 'TRIGGER_NAME' COMMENT '存放cron类型的触发器';

# 存储CalendarIntervalTrigger和DailyTimeIntervalTrigger两种类型的触发器，使用CalendarIntervalTrigger做如下配置：
#
# CalendarIntervalTrigger没有对应的FactoryBean，直接设置实现类CalendarIntervalTriggerImpl；
# 指定的重复周期是1，默认单位是天，也就是每天执行一次。
CREATE TABLE QRTZ_SIMPROP_TRIGGERS
(
    SCHED_NAME    VARCHAR(120)   NOT NULL COMMENT '调度器名，集群名',
    TRIGGER_NAME  VARCHAR(190)   NOT NULL COMMENT '触发器名',
    TRIGGER_GROUP VARCHAR(190)   NOT NULL COMMENT '触发器组',
    STR_PROP_1    VARCHAR(512)   NULL COMMENT '',
    STR_PROP_2    VARCHAR(512)   NULL,
    STR_PROP_3    VARCHAR(512)   NULL,
    INT_PROP_1    INT            NULL,
    INT_PROP_2    INT            NULL,
    LONG_PROP_1   BIGINT         NULL,
    LONG_PROP_2   BIGINT         NULL,
    DEC_PROP_1    NUMERIC(13, 4) NULL,
    DEC_PROP_2    NUMERIC(13, 4) NULL,
    BOOL_PROP_1   VARCHAR(1)     NULL,
    BOOL_PROP_2   VARCHAR(1)     NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB COMMENT = '存储CalendarIntervalTrigger和DailyTimeIntervalTrigger两种类型的触发器';

# 自定义的triggers使用blog类型进行存储，非自定义的triggers不会存放在此表中，
# Quartz提供的triggers包括：CronTrigger，CalendarIntervalTrigger，DailyTimeIntervalTrigger以及SimpleTrigger。
CREATE TABLE QRTZ_BLOB_TRIGGERS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_NAME  VARCHAR(190) NOT NULL,
    TRIGGER_GROUP VARCHAR(190) NOT NULL,
    BLOB_DATA     BLOB         NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    INDEX (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP),
    FOREIGN KEY (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
        REFERENCES QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB;

# 以 Blob 类型存储 Quartz 的 Calendar 信息
CREATE TABLE QRTZ_CALENDARS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    CALENDAR_NAME VARCHAR(190) NOT NULL,
    CALENDAR      BLOB         NOT NULL,
    PRIMARY KEY (SCHED_NAME, CALENDAR_NAME)
) ENGINE = InnoDB;

# 存储已暂停的 Trigger 组的信息
CREATE TABLE QRTZ_PAUSED_TRIGGER_GRPS
(
    SCHED_NAME    VARCHAR(120) NOT NULL,
    TRIGGER_GROUP VARCHAR(190) NOT NULL,
    PRIMARY KEY (SCHED_NAME, TRIGGER_GROUP)
) ENGINE = InnoDB;

# 存储已经触发的trigger相关信息，trigger随着时间的推移状态发生变化，直到最后trigger执行完成，从表中被删除；
# 以SimpleTrigger为例重复3次执行为例。
# 相同的trigger和job，每触发一次都会创建一个实例；从刚被创建的ACQUIRED状态，到EXECUTING状态，最后执行完从数据库中删除；
CREATE TABLE QRTZ_FIRED_TRIGGERS
(
    SCHED_NAME        VARCHAR(120) NOT NULL COMMENT '调度器名称，集群名',
    ENTRY_ID          VARCHAR(95)  NOT NULL COMMENT '运行Id',
    TRIGGER_NAME      VARCHAR(190) NOT NULL COMMENT '触发器名',
    TRIGGER_GROUP     VARCHAR(190) NOT NULL COMMENT '触发器组',
    INSTANCE_NAME     VARCHAR(190) NOT NULL COMMENT '集群中实例ID',
    FIRED_TIME        BIGINT(13)   NOT NULL COMMENT '触发时间',
    SCHED_TIME        BIGINT(13)   NOT NULL COMMENT '',
    PRIORITY          INTEGER      NOT NULL COMMENT '线程优先级',
    STATE             VARCHAR(16)  NOT NULL COMMENT '状态',
    JOB_NAME          VARCHAR(190) NULL COMMENT '任务名',
    JOB_GROUP         VARCHAR(190) NULL COMMENT '任务组',
    IS_NONCONCURRENT  VARCHAR(1)   NULL COMMENT '是否并行',
    REQUESTS_RECOVERY VARCHAR(1)   NULL COMMENT '是否恢复',
    PRIMARY KEY (SCHED_NAME, ENTRY_ID)
) ENGINE = InnoDB COMMENT = '存储与已触发的 Trigger 相关的状态信息，以及相联 Job 的执行信息';

CREATE TABLE QRTZ_SCHEDULER_STATE
(
    SCHED_NAME        VARCHAR(120) NOT NULL COMMENT '调度器名，和配置文件org.quartz.scheduler.instanceName保持一致, 集群名',
    INSTANCE_NAME     VARCHAR(190) NOT NULL COMMENT '集群中实例ID，配置文件中org.quartz.scheduler.instanceId的配置',
    LAST_CHECKIN_TIME BIGINT(13)   NOT NULL COMMENT '上次检查时间',
    CHECKIN_INTERVAL  BIGINT(13)   NOT NULL COMMENT '检查时间间隔，和org.quartz.jobStore.clusterCheckinInterval保持一致',
    PRIMARY KEY (SCHED_NAME, INSTANCE_NAME)
) ENGINE = InnoDB COMMENT = '调度器状态';

# 存储程序的悲观锁的信息(假如使用了悲观锁)
#
# Quartz提供的锁表，为多个节点调度提供分布式锁，实现分布式调度，默认有2个锁：
#
# STATE_ACCESS主要用在scheduler定期检查是否有效的时候，保证只有一个节点去处理已经失效的scheduler。
# TRIGGER_ACCESS主要用在TRIGGER被调度的时候，保证只有一个节点去执行调度。
CREATE TABLE QRTZ_LOCKS
(
    SCHED_NAME VARCHAR(120) NOT NULL,
    LOCK_NAME  VARCHAR(40)  NOT NULL,
    PRIMARY KEY (SCHED_NAME, LOCK_NAME)
) ENGINE = InnoDB;

CREATE INDEX IDX_QRTZ_J_REQ_RECOVERY ON QRTZ_JOB_DETAILS (SCHED_NAME, REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_J_GRP ON QRTZ_JOB_DETAILS (SCHED_NAME, JOB_GROUP);

CREATE INDEX IDX_QRTZ_T_J ON QRTZ_TRIGGERS (SCHED_NAME, JOB_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_JG ON QRTZ_TRIGGERS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_T_C ON QRTZ_TRIGGERS (SCHED_NAME, CALENDAR_NAME);
CREATE INDEX IDX_QRTZ_T_G ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_T_STATE ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_STATE ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_N_G_STATE ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_GROUP, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NEXT_FIRE_TIME ON QRTZ_TRIGGERS (SCHED_NAME, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST ON QRTZ_TRIGGERS (SCHED_NAME, TRIGGER_STATE, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_MISFIRE ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_STATE);
CREATE INDEX IDX_QRTZ_T_NFT_ST_MISFIRE_GRP ON QRTZ_TRIGGERS (SCHED_NAME, MISFIRE_INSTR, NEXT_FIRE_TIME, TRIGGER_GROUP,
                                                             TRIGGER_STATE);

CREATE INDEX IDX_QRTZ_FT_TRIG_INST_NAME ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME);
CREATE INDEX IDX_QRTZ_FT_INST_JOB_REQ_RCVRY ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, INSTANCE_NAME, REQUESTS_RECOVERY);
CREATE INDEX IDX_QRTZ_FT_J_G ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_JG ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, JOB_GROUP);
CREATE INDEX IDX_QRTZ_FT_T_G ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_NAME, TRIGGER_GROUP);
CREATE INDEX IDX_QRTZ_FT_TG ON QRTZ_FIRED_TRIGGERS (SCHED_NAME, TRIGGER_GROUP);

commit;
